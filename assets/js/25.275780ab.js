(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{562:function(a,t,s){"use strict";s.r(t);var e=s(7),_=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"linux文本三剑客-grep、sed、awk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux文本三剑客-grep、sed、awk"}},[a._v("#")]),a._v(" Linux文本三剑客---grep、sed、awk")]),a._v(" "),s("p",[a._v("awk、grep、sed是linux操作文本的三大利器，合称文本三剑客，也是必须掌握的linux命令之一。三者的功能都是处理文本，但侧重点各不相同，其中属awk功能最强大，但也最复杂。grep更适合单纯的查找或匹配文本，sed更适合编辑匹配到的文本，awk更适合格式化文本，对文本进行较复杂格式处理。")]),a._v(" "),s("h2",{attrs:{id:"_1、grep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、grep"}},[a._v("#")]),a._v(" 1、grep")]),a._v(" "),s("h3",{attrs:{id:"_1-1-什么是grep和egrep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是grep和egrep"}},[a._v("#")]),a._v(" 1.1 什么是grep和egrep")]),a._v(" "),s("p",[a._v("Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来（匹配到的标红）。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。")]),a._v(" "),s("p",[a._v("grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。")]),a._v(" "),s("p",[a._v("grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。")]),a._v(" "),s("p",[a._v("egrep = grep -E：扩展的正则表达式 （除了< , > , \\b 使用其他正则都可以去掉\\）")]),a._v(" "),s("h3",{attrs:{id:"_1-2-使用grep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-使用grep"}},[a._v("#")]),a._v(" 1.2 使用grep")]),a._v(" "),s("p",[a._v("1.2.1 命令格式")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("grep [选项] 模式 文件名\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("1.2.2 命令参数")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选项")]),a._v(" "),s("th",[a._v("参数意义")]),a._v(" "),s("th",[a._v("示例")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("-i")]),a._v(" "),s("td",[a._v("匹配时PATTERN中的条件，忽略器大小写")]),a._v(" "),s("td",[a._v("grep -i 'Root' /etc/passwd")])]),a._v(" "),s("tr",[s("td",[a._v("-v")]),a._v(" "),s("td",[a._v("反向匹配，显示没有匹配到的行")]),a._v(" "),s("td",[a._v("grep -v 'linux' /etc/passwd")])]),a._v(" "),s("tr",[s("td",[a._v("-o")]),a._v(" "),s("td",[a._v("只显示匹配到的内容")]),a._v(" "),s("td",[a._v("grep -o 'gentoo' /etc/passwd")])]),a._v(" "),s("tr",[s("td",[a._v("--color=auto")]),a._v(" "),s("td",[a._v("支持扩展表达式")]),a._v(" "),s("td",[a._v("grep --color=auto 'root' /etc/passwd")])]),a._v(" "),s("tr",[s("td",[a._v("-A")]),a._v(" "),s("td",[a._v("显示匹配行的后面指定数目行")]),a._v(" "),s("td",[a._v("grep -A 2 'linux' /etc/passwd")])]),a._v(" "),s("tr",[s("td",[a._v("-B")]),a._v(" "),s("td",[a._v("显示匹配行的前面指定数目行")]),a._v(" "),s("td",[a._v("grep -B 3 'linux' /etc/passwd")])]),a._v(" "),s("tr",[s("td",[a._v("-C")]),a._v(" "),s("td",[a._v("显示匹配行的前后指定相同数目行")]),a._v(" "),s("td",[a._v("grep -C 2 'linux' /etc/passwd")])]),a._v(" "),s("tr",[s("td",[a._v("-n")]),a._v(" "),s("td",[a._v("显示输出行的行号")]),a._v(" "),s("td",[a._v("grep -nC 2 'linux' /etc/passwd")])]),a._v(" "),s("tr",[s("td",[a._v("-E")]),a._v(" "),s("td",[a._v("支持扩展正则表达式")]),a._v(" "),s("td",[a._v("grep -E '[0-9]+' /etc/passwd")])]),a._v(" "),s("tr",[s("td",[a._v("-c")]),a._v(" "),s("td",[a._v("只显示匹配到行的数目")]),a._v(" "),s("td",[a._v("grep -c '^root>' /etc/passwd")])])])]),a._v(" "),s("p",[a._v("注意，如果是搜索多个文件，grep 命令的搜索结果只显示文件中发现匹配模式的文件名；而如果搜索单个文件，grep 命令的结果将显示每一个包含匹配模式的行。")]),a._v(" "),s("p",[s("code",[a._v("【例 1】假设有一份 emp.data 员工清单，现在要搜索此文件，找出职位为 CLERK 的所有员工，则执行命令如下：")]),a._v(" "),s("code",[a._v("[root@localhost ~]# grep CLERK emp.data")])]),a._v(" "),s("p",[s("code",[a._v("而在此基础上，如果只想知道职位为 CLERK 的员工的人数，可以使用“-c”选项，执行命令如下：")]),a._v(" "),s("code",[a._v("[root@localhost ~]# grep -c CLERK emp.data")])]),a._v(" "),s("p",[s("code",[a._v("【例 2】搜索 emp.data 文件，使用正则表达式找出以 78 开头的数据行，执行命令如下：")]),a._v(" "),s("code",[a._v("[root@localhost ~]# grep ^78 emp.data")])]),a._v(" "),s("h2",{attrs:{id:"_2、正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、正则表达式"}},[a._v("#")]),a._v(" 2、正则表达式")]),a._v(" "),s("h3",{attrs:{id:"_2-1-认识正则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-认识正则"}},[a._v("#")]),a._v(" 2.1 认识正则")]),a._v(" "),s("h4",{attrs:{id:"_1-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[a._v("#")]),a._v(" （1）介绍")]),a._v(" "),s("p",[a._v("正则表达式应用广泛，在绝大多数的编程语言都可以完美应用，在Linux中，也有着极大的用处。")]),a._v(" "),s("p",[a._v("使用正则表达式，可以有效的筛选出需要的文本，然后结合相应的支持的工具或语言，完成任务需求。")]),a._v(" "),s("p",[a._v("在本篇博客中，我们使用grep/egrep来完成对正则表达式的调用")]),a._v(" "),s("h4",{attrs:{id:"_2-正则表达式类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-正则表达式类型"}},[a._v("#")]),a._v(" （2）正则表达式类型")]),a._v(" "),s("p",[a._v("正则表达式可以使用正则表达式引擎实现，正则表达式引擎是解释正则表达式模式并使用这些模式匹配文本的基础软件。")]),a._v(" "),s("p",[a._v("在Linux中，常用的正则表达式有：")]),a._v(" "),s("p",[a._v("POSIX 基本正则表达式（BRE）引擎\nPOSIX 扩展正则表达式（BRE）引擎")]),a._v(" "),s("h3",{attrs:{id:"_2-2-基本正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-基本正则表达式"}},[a._v("#")]),a._v(" 2.2 基本正则表达式")]),a._v(" "),s("h4",{attrs:{id:"_2-2-1-字符集种类及表示方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-字符集种类及表示方法"}},[a._v("#")]),a._v(" 2.2.1 字符集种类及表示方法")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("种类")]),a._v(" "),s("th",[a._v("意义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("0-9 或 [:digit:]")]),a._v(" "),s("td",[a._v("0-9数字")])]),a._v(" "),s("tr",[s("td",[a._v("a-z 或 [:lower:]")]),a._v(" "),s("td",[a._v("小写字母")])]),a._v(" "),s("tr",[s("td",[a._v("A-Z 或 [:upper:]")]),a._v(" "),s("td",[a._v("大写字母")])]),a._v(" "),s("tr",[s("td",[a._v("[:space:]")]),a._v(" "),s("td",[a._v("空格或TAB空白字符")])]),a._v(" "),s("tr",[s("td",[a._v("[:punct:]")]),a._v(" "),s("td",[a._v("特殊字符")])]),a._v(" "),s("tr",[s("td",[a._v("[:alpha:]")]),a._v(" "),s("td",[a._v("大小写字母")])]),a._v(" "),s("tr",[s("td",[a._v("[:alnum:]")]),a._v(" "),s("td",[a._v("字母和数字的组合")])])])]),a._v(" "),s("h4",{attrs:{id:"_2-2-2-基本正则表达式的的通配符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-基本正则表达式的的通配符"}},[a._v("#")]),a._v(" 2.2.2 基本正则表达式的的通配符：")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("通配符")]),a._v(" "),s("th",[a._v("功能")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("c*")]),a._v(" "),s("td",[a._v("将匹配 0 个（即空白）或多个字符 c（c 为任一字符）。")])]),a._v(" "),s("tr",[s("td",[a._v(".")]),a._v(" "),s("td",[a._v("将匹配任何一个字符，且只能是一个字符。")])]),a._v(" "),s("tr",[s("td",[a._v("[xyz]")]),a._v(" "),s("td",[a._v("匹配方括号中的任意一个字符。")])]),a._v(" "),s("tr",[s("td",[a._v("[^xyz]")]),a._v(" "),s("td",[a._v("匹配除方括号中字符外的所有字符。")])]),a._v(" "),s("tr",[s("td",[a._v("^")]),a._v(" "),s("td",[a._v("锁定行的开头。")])]),a._v(" "),s("tr",[s("td",[a._v("$")]),a._v(" "),s("td",[a._v("锁定行的结尾。")])])])]),a._v(" "),s("p",[a._v("需要注意的是，在基本正则表达式中，如通配符 *、+、{、|、( 和 )等，已经失去了它们原本的含义，而若要恢复它们原本的含义，则要在之前添加反斜杠 \\，如 *、+、{、|、( 和 )。")]),a._v(" "),s("h2",{attrs:{id:"_3、sed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、sed"}},[a._v("#")]),a._v(" 3、sed")]),a._v(" "),s("h3",{attrs:{id:"_3-1-认识sed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-认识sed"}},[a._v("#")]),a._v(" "),s("strong",[a._v("3.1 认识sed")])]),a._v(" "),s("p",[a._v("sed 是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（patternspace ），接着用sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环。如果没有使诸如‘D’ 的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间。这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出或-i。")]),a._v(" "),s("p",[a._v("功能：主要用来自动编辑一个或多个文件, 简化对文件的反复操作")]),a._v(" "),s("h3",{attrs:{id:"_3-2-sed-命令的基本格式如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-sed-命令的基本格式如下"}},[a._v("#")]),a._v(" 3.2 sed 命令的基本格式如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[root@localhost ~]# sed [选项] [脚本命令] 文件名\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("该命令常用的选项及含义，如表 1 所示。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选项")]),a._v(" "),s("th",[a._v("含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("-e 脚本命令")]),a._v(" "),s("td",[a._v("该选项会将其后跟的脚本命令添加到已有的命令中。")])]),a._v(" "),s("tr",[s("td",[a._v("-f 脚本命令文件")]),a._v(" "),s("td",[a._v("该选项会将其后文件中的脚本命令添加到已有的命令中。")])]),a._v(" "),s("tr",[s("td",[a._v("-n")]),a._v(" "),s("td",[a._v("默认情况下，sed 会在所有的脚本指定执行完毕后，会自动输出处理后的内容，而该选项会屏蔽启动输出，需使用 print 命令来完成输出。")])]),a._v(" "),s("tr",[s("td",[a._v("-i")]),a._v(" "),s("td",[a._v("此选项会直接修改源文件，要慎用。")])]),a._v(" "),s("tr",[s("td",[a._v("-i.bak")]),a._v(" "),s("td",[a._v("在将处理的结果写入文件之前备份一份")])])])]),a._v(" "),s("p",[a._v("成功使用 sed 命令的关键在于掌握各式各样的脚本命令及格式，它能帮你定制编辑文件的规则。")]),a._v(" "),s("h3",{attrs:{id:"_3-3-地址定界"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-地址定界"}},[a._v("#")]),a._v(" 3.3 地址定界")]),a._v(" "),s("ul",[s("li",[a._v("不给地址：对全文进行处理")]),a._v(" "),s("li",[a._v("单地址：\n#: 指定的行\n/pattern/：被此处模式所能够匹配到的每一行")]),a._v(" "),s("li",[a._v("地址范围：\n#,#\n#,+#\n/pat1/,/pat2/\n#,/pat1/")]),a._v(" "),s("li",[a._v("~：步进\nsed -n '1~2p'  只打印奇数行 （1~2 从第1行，一次加2行）\nsed -n '2~2p'  只打印偶数行")])]),a._v(" "),s("h3",{attrs:{id:"_3-4-编辑命令command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-编辑命令command"}},[a._v("#")]),a._v(" 3.4 编辑命令command")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("d：删除模式空间匹配的行，并立即启用下一轮循环")])]),a._v(" "),s("li",[s("p",[a._v("p：打印当前模式空间内容，追加到默认输出之后")])]),a._v(" "),s("li",[s("p",[a._v("a：在指定行后面追加文本，支持使用\\n实现多行追加")])]),a._v(" "),s("li",[s("p",[a._v("i：在行前面插入文本，支持使用\\n实现多行追加")])]),a._v(" "),s("li",[s("p",[a._v("c：替换行为单行或多行文本，支持使用\\n实现多行追加")])]),a._v(" "),s("li",[s("p",[a._v("w：保存模式匹配的行至指定文件")])]),a._v(" "),s("li",[s("p",[a._v("r：读取指定文件的文本至模式空间中匹配到的行后")])]),a._v(" "),s("li",[s("p",[a._v("=：为模式空间中的行打印行号")])]),a._v(" "),s("li",[s("p",[a._v("!：模式空间中匹配行取反处理")])]),a._v(" "),s("li",[s("p",[a._v("s///：查找替换，支持使用其它分隔符，如：s@@@，s###；")]),a._v(" "),s("p",[a._v("``加g表示行内全局替换；"),s("code"),a._v("在替换时，可以加一下命令，实现大小写转换"),s("code"),a._v("\\l：把下个字符转换成小写。"),s("code"),a._v("\\L：把replacement字母转换成小写，直到\\U或\\E出现。"),s("code"),a._v("\\u：把下个字符转换成大写。"),s("code"),a._v("\\U：把replacement字母转换成大写，直到\\L或\\E出现。"),s("code",[a._v("\\E：停止以\\L或\\U开始的大小写转换")])])])]),a._v(" "),s("h3",{attrs:{id:"_3-5-sed用法演示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-sed用法演示"}},[a._v("#")]),a._v(" "),s("strong",[a._v("3.5 sed用法演示")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("举例：（假设我们有一文件名为ab）\n删除某行\n[root@localhost ruby] # sed '1d' ab              #删除第一行 \n[root@localhost ruby] # sed '$d' ab              #删除最后一行\n[root@localhost ruby] # sed '1,2d' ab           #删除第一行到第二行\n[root@localhost ruby] # sed '2,$d' ab           #删除第二行到最后一行\n显示某行\n[root@localhost ruby] # sed -n '1p' ab           #显示第一行 \n[root@localhost ruby] # sed -n '$p' ab           #显示最后一行\n[root@localhost ruby] # sed -n '1,2p' ab        #显示第一行到第二行\n[root@localhost ruby] # sed -n '2,$p' ab        #显示第二行到最后一行\n使用模式进行查询\n[root@localhost ruby] # sed -n '/ruby/p' ab    #查询包括关键字ruby所在所有行\n[root@localhost ruby] # sed -n '/\\$/p' ab        #查询包括关键字$所在行\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br")])]),s("p",[a._v("使用反斜线\\屏蔽特殊含义")]),a._v(" "),s("h2",{attrs:{id:"_4、awk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、awk"}},[a._v("#")]),a._v(" 4、awk")]),a._v(" "),s("h3",{attrs:{id:"_4-1-认识awk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-认识awk"}},[a._v("#")]),a._v(" 4.1 认识awk")]),a._v(" "),s("p",[a._v("​\t\tawk是一款强大的报告生成器，和 sed 命令类似，awk 命令也是逐行扫描文件（从第 1 行到最后一行），寻找含有目标文本的行，如果匹配成功，则会在该行上执行用户想要的操作；反之，则不对行做任何处理。")]),a._v(" "),s("p",[a._v("​\t\t不同于sed和grep,它的侧重点是如何把文本信息更好的展示出来，常用与统计和格式化输出。awk相当于微型的shell,有着自己一套语法结构，例如：循环结构，数组，条件判断，函数，内置变量等功能。处理对象一般纯文本文件或纯文本信息。在开源界的awk是gawk(GNU)。在Linux中常使用的gawk,但是一般都称之为awk。")]),a._v(" "),s("h3",{attrs:{id:"_4-2-awk-命令的基本格式为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-awk-命令的基本格式为"}},[a._v("#")]),a._v(" 4.2 awk 命令的基本格式为")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[root@localhost ~]# awk [选项] '脚本命令' 文件名\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"_4-3-常用命令选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-常用命令选项"}},[a._v("#")]),a._v(" 4.3 常用命令选项")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选项")]),a._v(" "),s("th",[a._v("含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("-F fs")]),a._v(" "),s("td",[a._v("指定以 fs 作为输入行的分隔符，awk 命令默认分隔符为空格或制表符。")])]),a._v(" "),s("tr",[s("td",[a._v("-f file")]),a._v(" "),s("td",[a._v("从脚本文件中读取 awk 脚本指令，以取代直接在命令行中输入指令。")])]),a._v(" "),s("tr",[s("td",[a._v("-v var=val")]),a._v(" "),s("td",[a._v("在执行处理过程之前，设置一个变量 var，并给其设备初始值为 val。")])])])]),a._v(" "),s("h3",{attrs:{id:"_4-4-awk-使用数据字段变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-awk-使用数据字段变量"}},[a._v("#")]),a._v(" 4.4 awk 使用数据字段变量")]),a._v(" "),s("p",[a._v("awk 的主要特性之一是其处理文本文件中数据的能力，它会自动给一行中的每个数据元素分配一个变量。")]),a._v(" "),s("p",[a._v("默认情况下，awk 会将如下变量分配给它在文本行中发现的数据字段：")]),a._v(" "),s("ul",[s("li",[a._v("$0 代表整个文本行；")]),a._v(" "),s("li",[a._v("$1 代表文本行中的第 1 个数据字段；")]),a._v(" "),s("li",[a._v("$2 代表文本行中的第 2 个数据字段；")]),a._v(" "),s("li",[a._v("$n 代表文本行中的第 n 个数据字段。")])]),a._v(" "),s("p",[a._v("前面说过，在 awk 中，默认的字段分隔符是任意的空白字符（例如空格或制表符）。 在文本行中，每个数据字段都是通过字段分隔符划分的。awk 在读取一行文本时，会用预定义的字段分隔符划分每个数据字段。")]),a._v(" "),s("p",[s("u",[a._v("执行命令使用的是 print 命令，此命令经常会使用，它的作用很简单，就是将指定的文本进行输出。")])]),a._v(" "),s("p",[a._v("所以在下面的例子中，awk 程序读取文本文件，只显示第 1 个数据字段的值：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[root@localhost ~]# cat data2.txt\nOne line of test text.\nTwo lines of test text.\nThree lines of test text.\n[root@localhost ~]# awk '{print $1}' data2.txt\nOne\nTwo\nThree\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("该程序用 $1 字段变量来表示“仅显示每行文本的第 1 个数据字段”。当然，如果你要读取采用了其他字段分隔符的文件，可以用 -F 选项手动指定。")]),a._v(" "),s("h3",{attrs:{id:"_4-5-awk-脚本命令使用多个命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-awk-脚本命令使用多个命令"}},[a._v("#")]),a._v(" 4.5 awk 脚本命令使用多个命令")]),a._v(" "),s("p",[a._v("awk 允许将多条命令组合成一个正常的程序。要在命令行上的程序脚本中使用多条命令，只要在命令之间放个分号即可，例如：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('[root@localhost ~]# echo "My name is Rich" | awk \'{$4="Christine"; print $0}\'\nMy name is Christine\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("第一条命令会给字段变量 $4 赋值。第二条命令会打印整个数据字段。可以看到，awk 程序在输出中已经将原文本中的第四个数据字段替换成了新值。")]),a._v(" "),s("p",[a._v("除此之外，也可以一次一行地输入程序脚本命令，比如说：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[root@localhost ~]# awk '{\n> $4=\"Christine\"\n> print $0}'\nMy name is Rich\nMy name is Christine\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("在你用了表示起始的单引号后，bash shell 会使用 > 来提示输入更多数据，我们可以每次在每行加一条命令，直到输入了结尾的单引号。")]),a._v(" "),s("p",[a._v("注意，此例中因为没有在命令行中指定文件名，awk 程序需要用户输入获得数据，因此当运行这个程序的时候，它会一直等着用户输入文本，此时如果要退出程序，只需按下 Ctrl+D 组合键即可。")]),a._v(" "),s("h3",{attrs:{id:"_4-6-awk从文件中读取程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-awk从文件中读取程序"}},[a._v("#")]),a._v(" 4.6 awk从文件中读取程序")]),a._v(" "),s("p",[a._v("跟 sed 一样，awk 允许将脚本命令存储到文件中，然后再在命令行中引用，比如：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[root@localhost ~]# cat awk.sh\n{print $1 \"'s home directory is \" $6}\n[root@localhost ~]# awk -F: -f awk.sh /etc/passwd\nroot's home directory is /root\nbin's home directory is /bin\ndaemon's home directory is /sbin\nadm's home directory is /var/adm\nlp's home directory is /var/spool/lpd\n...\nChristine's home directory is /home/Christine\nSamantha's home directory is /home/Samantha\nTimothy's home directory is /home/Timothy\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("p",[a._v("awk.sh 脚本文件会使用 print 命令打印 /etc/passwd 文件的主目录数据字段（字段变量 $6），以及 userid 数据字段（字段变量 $1）。注意，在程序文件中，也可以指定多条命令，只要一条命令放一行即可，之间不需要用分号。")]),a._v(" "),s("h3",{attrs:{id:"_4-7-awk-begin关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-awk-begin关键字"}},[a._v("#")]),a._v(" 4.7 awk BEGIN关键字")]),a._v(" "),s("p",[a._v("awk 中还可以指定脚本命令的运行时机。默认情况下，awk 会从输入中读取一行文本，然后针对该行的数据执行程序脚本，但有时可能需要在处理数据前运行一些脚本命令，这就需要使用 BEGIN 关键字。")]),a._v(" "),s("p",[a._v("BEGIN 会强制 awk 在读取数据前执行该关键字后指定的脚本命令，例如：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[root@localhost ~]# cat data3.txt\nLine 1\nLine 2\nLine 3\n[root@localhost ~]# awk 'BEGIN {print \"The data3 File Contents:\"}\n\\> {print $0}' data3.txt\nThe data3 File Contents:\nLine 1\nLine 2\nLine 3\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("p",[a._v("可以看到，这里的脚本命令中分为 2 部分，BEGIN 部分的脚本指令会在 awk 命令处理数据前运行，而真正用来处理数据的是第二段脚本命令。")]),a._v(" "),s("h3",{attrs:{id:"_4-8awk-end关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8awk-end关键字"}},[a._v("#")]),a._v(" 4.8awk END关键字")]),a._v(" "),s("p",[a._v("和 BEGIN 关键字相对应，END 关键字允许我们指定一些脚本命令，awk 会在读完数据后执行它们，例如：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('[root@localhost ~]# awk \'BEGIN {print "The data3 File Contents:"}\n\\> {print $0}\n\\> END {print "End of File"}\' data3.txt\nThe data3 File Contents:\nLine 1\nLine 2\nLine 3\nEnd of File\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("可以看到，当 awk 程序打印完文件内容后，才会执行 END 中的脚本命令。\n"),s("Valine")],1)])}),[],!1,null,null,null);t.default=_.exports}}]);